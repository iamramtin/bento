name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:

    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Free up some disk space on ubuntu
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Workaround to provide additional free space for testing.
        #   https://github.com/actions/virtual-environments/issues/2840
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21.x
        check-latest: true

    - name: Release Notes
      run: ./resources/scripts/release_notes.sh > ./release_notes.md

    - name: GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        version: latest
        args: release --release-notes=./release_notes.md --timeout 120m
      env:
        GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:

    - name: Check Out Repo
      uses: actions/checkout@v4

    - name: Free up some disk space on ubuntu
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Workaround to provide additional free space for testing.
        #   https://github.com/actions/virtual-environments/issues/2840
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Install Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta CGO
      id: docker_meta_cgo
      uses: docker/metadata-action@v5
      with:
        images: |
          public.ecr.aws/q3y3o3o4/warpstream_bento
        flavor: |
          latest=auto
          suffix=-cgo
        tags: |
          type=semver,suffix=-cgo,pattern={{version}}
          type=semver,suffix=-cgo,pattern={{major}}.{{minor}}
          type=semver,suffix=-cgo,pattern={{major}}

    - name: Build and push CGO
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./resources/docker/Dockerfile.cgo
        push: true
        tags: ${{ steps.docker_meta_cgo.outputs.tags }}

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: |
          public.ecr.aws/q3y3o3o4/warpstream_bento
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./resources/docker/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
