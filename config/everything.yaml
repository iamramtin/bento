http:
  address: 0.0.0.0:4195
  read_timeout_ms: 5000
input:
  type: stdin
  amazon_s3:
    region: eu-west-1
    bucket: ""
    delete_objects: false
    sqs_url: ""
    sqs_body_path: Records.s3.object.key
    credentials:
      id: ""
      secret: ""
      token: ""
    timeout_s: 5
  amazon_sqs:
    region: eu-west-1
    url: ""
    credentials:
      id: ""
      secret: ""
      token: ""
    timeout_s: 5
  amqp:
    url: amqp://guest:guest@localhost:5672/
    exchange: benthos-exchange
    exchange_type: direct
    queue: benthos-queue
    key: benthos-key
    consumer_tag: benthos-consumer
    prefetch_count: 1
    prefetch_size: 0
  fan_in:
    inputs: []
  file:
    path: ""
    multipart: false
    max_buffer: 65536
    custom_delimiter: ""
  http_client:
    url: http://localhost:4195/get/stream
    verb: GET
    payload: ""
    content_type: application/octet-stream
    stream: false
    stream_multipart: false
    stream_max_buffer: 65536
    stream_custom_delimiter: ""
    oauth:
      consumer_key: ""
      consumer_secret: ""
      access_token: ""
      access_token_secret: ""
      request_url: ""
      enabled: false
    timeout_ms: 5000
    retry_period_ms: 1000
    retries: 3
    skip_cert_verify: false
  http_server:
    address: ""
    path: /post
    timeout_ms: 5000
    cert_file: ""
    key_file: ""
  kafka:
    addresses:
    - localhost:9092
    client_id: benthos_kafka_input
    consumer_group: benthos_consumer_group
    topic: benthos_stream
    partition: 0
    start_from_oldest: true
  kafka_balanced:
    addresses:
    - localhost:9092
    client_id: benthos_kafka_input
    consumer_group: benthos_consumer_group
    topics:
    - benthos_stream
    start_from_oldest: true
  nats:
    urls:
    - nats://localhost:4222
    subject: benthos_messages
  nats_stream:
    urls:
    - nats://localhost:4222
    cluster_id: benthos_cluster
    client_id: benthos_client
    queue: benthos_queue
    durable_name: benthos_offset
    subject: benthos_messages
  nsq:
    nsqd_tcp_addresses:
    - localhost:4150
    lookupd_http_addresses:
    - localhost:4161
    topic: benthos_messages
    channel: benthos_stream
    user_agent: benthos_consumer
    max_in_flight: 100
  redis_list:
    url: tcp://localhost:6379
    key: benthos_list
    timeout_ms: 5000
  redis_pubsub:
    url: tcp://localhost:6379
    channels:
    - benthos_chan
  scalability_protocols:
    urls:
    - tcp://*:5555
    bind: true
    socket_type: PULL
    reply_success: SUCCESS
    reply_error: ERROR
    sub_filters: []
    poll_timeout_ms: 5000
    reply_timeout_ms: 5000
  stdin:
    multipart: false
    max_buffer: 65536
    custom_delimiter: ""
  zmq4:
    urls:
    - tcp://localhost:5555
    bind: false
    socket_type: PULL
    sub_filters: []
    high_water_mark: 0
    poll_timeout_ms: 5000
  processors:
  - type: bounds_check
    blob_to_multi: {}
    bounds_check:
      max_parts: 100
      min_parts: 1
      max_part_size: 1073741824
    combine:
      parts: 2
    decompress:
      algorithm: gzip
      parts: []
    hash_sample:
      retain_min: 0
      retain_max: 10
      parts:
      - 0
    insert_part:
      index: -1
      content: ""
    multi_to_blob: {}
    sample:
      retain: 0.1
      randomseed: 0
    select_parts:
      parts:
      - 0
    set_json:
      part: 0
      path: ""
      value: ""
    unarchive:
      format: tar
      parts: []
output:
  type: stdout
  amazon_s3:
    region: eu-west-1
    bucket: ""
    path: ${!count:files}-${!timestamp_unix_nano}.txt
    credentials:
      id: ""
      secret: ""
      token: ""
    timeout_s: 5
  amqp:
    url: amqp://guest:guest@localhost:5672/
    exchange: benthos-exchange
    exchange_type: direct
    key: benthos-key
  fan_out:
    outputs: []
  file:
    path: ""
    custom_delimiter: ""
  http_client:
    url: http://localhost:8081/post
    verb: POST
    content_type: application/octet-stream
    oauth:
      consumer_key: ""
      consumer_secret: ""
      access_token: ""
      access_token_secret: ""
      request_url: ""
      enabled: false
    timeout_ms: 5000
    retry_period_ms: 1000
    retries: 3
    skip_cert_verify: false
  http_server:
    address: ""
    path: /get
    stream_path: /get/stream
    timeout_ms: 5000
    cert_file: ""
    key_file: ""
  kafka:
    addresses:
    - localhost:9092
    client_id: benthos_kafka_output
    topic: benthos_stream
    max_msg_bytes: 1000000
    timeout_ms: 5000
    ack_replicas: true
  nats:
    urls:
    - nats://localhost:4222
    subject: benthos_messages
  nats_stream:
    urls:
    - nats://localhost:4222
    cluster_id: benthos_cluster
    client_id: benthos_client
    subject: benthos_messages
  nsq:
    nsqd_tcp_address: localhost:4150
    topic: benthos_messages
    user_agent: benthos_producer
    max_in_flight: 100
  redis_list:
    url: tcp://localhost:6379
    key: benthos_list
  redis_pubsub:
    url: tcp://localhost:6379
    channel: benthos_chan
  round_robin:
    outputs: []
  scalability_protocols:
    urls:
    - tcp://localhost:5556
    bind: false
    socket_type: PUSH
    reply_success: SUCCESS
    poll_timeout_ms: 5000
    reply_timeout_ms: 5000
  stdout:
    custom_delimiter: ""
  zmq4:
    urls:
    - tcp://*:5556
    bind: true
    socket_type: PUSH
    high_water_mark: 0
  processors: []
buffer:
  type: none
  retry_throttle_ms: 1000
  memory:
    limit: 524288000
  mmap_file:
    directory: ""
    file_size: 262144000
    retry_period_ms: 1000
    clean_up: true
    reserved_disk_space: 104857600
  none: {}
logger:
  prefix: service
  log_level: INFO
  add_timestamp: true
  json_format: false
metrics:
  type: http_server
  prefix: benthos
  http_server: {}
  prometheus: {}
  riemann:
    server: ""
    ttl: 5
    tags:
    - service
    - meter
    flush_interval: 2s
  statsd:
    address: localhost:4040
    flush_period: 100ms
    max_packet_size: 1440
    network: udp
sys_exit_timeout_ms: 20000

