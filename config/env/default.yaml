# This file was auto generated by benthos_config_gen.
http:
  address: ${HTTP_ADDRESS:0.0.0.0:4195}
  debug_endpoints: ${HTTP_DEBUG_ENDPOINTS:false}
  read_timeout_ms: ${HTTP_READ_TIMEOUT_MS:5000}
  root_path: ${HTTP_ROOT_PATH:/benthos}
input:
  broker:
    copies: ${INPUTS:1}
    inputs:
    - amazon_s3:
        bucket: ${INPUT_AMAZON_S3_BUCKET}
        credentials:
          id: ${INPUT_AMAZON_S3_CREDENTIALS_ID}
          role: ${INPUT_AMAZON_S3_CREDENTIALS_ROLE}
          secret: ${INPUT_AMAZON_S3_CREDENTIALS_SECRET}
          token: ${INPUT_AMAZON_S3_CREDENTIALS_TOKEN}
        delete_objects: ${INPUT_AMAZON_S3_DELETE_OBJECTS:false}
        prefix: ${INPUT_AMAZON_S3_PREFIX}
        region: ${INPUT_AMAZON_S3_REGION:eu-west-1}
        sqs_body_path: ${INPUT_AMAZON_S3_SQS_BODY_PATH:Records.s3.object.key}
        sqs_envelope_path: ${INPUT_AMAZON_S3_SQS_ENVELOPE_PATH}
        sqs_max_messages: ${INPUT_AMAZON_S3_SQS_MAX_MESSAGES:10}
        sqs_url: ${INPUT_AMAZON_S3_SQS_URL}
        timeout_s: ${INPUT_AMAZON_S3_TIMEOUT_S:5}
      amazon_sqs:
        credentials:
          id: ${INPUT_AMAZON_SQS_CREDENTIALS_ID}
          role: ${INPUT_AMAZON_SQS_CREDENTIALS_ROLE}
          secret: ${INPUT_AMAZON_SQS_CREDENTIALS_SECRET}
          token: ${INPUT_AMAZON_SQS_CREDENTIALS_TOKEN}
        region: ${INPUT_AMAZON_SQS_REGION:eu-west-1}
        timeout_s: ${INPUT_AMAZON_SQS_TIMEOUT_S:5}
        url: ${INPUT_AMAZON_SQS_URL}
      amqp:
        consumer_tag: ${INPUT_AMQP_CONSUMER_TAG:benthos-consumer}
        exchange: ${INPUT_AMQP_EXCHANGE:benthos-exchange}
        exchange_type: ${INPUT_AMQP_EXCHANGE_TYPE:direct}
        key: ${INPUT_AMQP_KEY:benthos-key}
        prefetch_count: ${INPUT_AMQP_PREFETCH_COUNT:10}
        prefetch_size: ${INPUT_AMQP_PREFETCH_SIZE:0}
        queue: ${INPUT_AMQP_QUEUE:benthos-queue}
        url: ${INPUT_AMQP_URL:amqp://guest:guest@localhost:5672/}
      dynamic:
        prefix: ${INPUT_DYNAMIC_PREFIX}
        timeout_ms: ${INPUT_DYNAMIC_TIMEOUT_MS:5000}
      file:
        delimiter: ${INPUT_FILE_DELIMITER}
        max_buffer: ${INPUT_FILE_MAX_BUFFER:1000000}
        multipart: ${INPUT_FILE_MULTIPART:false}
        path: ${INPUT_FILE_PATH}
      files:
        path: ${INPUT_FILES_PATH}
      http_client:
        backoff_on:
        - ${INPUT_HTTP_CLIENT_BACKOFF_ON:429}
        basic_auth:
          enabled: ${INPUT_HTTP_CLIENT_BASIC_AUTH_ENABLED:false}
          password: ${INPUT_HTTP_CLIENT_BASIC_AUTH_PASSWORD}
          username: ${INPUT_HTTP_CLIENT_BASIC_AUTH_USERNAME}
        headers:
          Content-Type: ${INPUT_HTTP_CLIENT_HEADERS_CONTENT_TYPE:application/octet-stream}
        max_retry_backoff_ms: ${INPUT_HTTP_CLIENT_MAX_RETRY_BACKOFF_MS:300000}
        oauth:
          access_token: ${INPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${INPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${INPUT_HTTP_CLIENT_OAUTH_CONSUMER_KEY}
          consumer_secret: ${INPUT_HTTP_CLIENT_OAUTH_CONSUMER_SECRET}
          enabled: ${INPUT_HTTP_CLIENT_OAUTH_ENABLED:false}
          request_url: ${INPUT_HTTP_CLIENT_OAUTH_REQUEST_URL}
        payload: ${INPUT_HTTP_CLIENT_PAYLOAD}
        retries: ${INPUT_HTTP_CLIENT_RETRIES:3}
        retry_period_ms: ${INPUT_HTTP_CLIENT_RETRY_PERIOD_MS:1000}
        skip_cert_verify: ${INPUT_HTTP_CLIENT_SKIP_CERT_VERIFY:false}
        stream:
          delimiter: ${INPUT_HTTP_CLIENT_STREAM_DELIMITER}
          enabled: ${INPUT_HTTP_CLIENT_STREAM_ENABLED:false}
          max_buffer: ${INPUT_HTTP_CLIENT_STREAM_MAX_BUFFER:1000000}
          multipart: ${INPUT_HTTP_CLIENT_STREAM_MULTIPART:false}
          reconnect: ${INPUT_HTTP_CLIENT_STREAM_RECONNECT:true}
        timeout_ms: ${INPUT_HTTP_CLIENT_TIMEOUT_MS:5000}
        url: ${INPUT_HTTP_CLIENT_URL:http://localhost:4195/get}
        verb: ${INPUT_HTTP_CLIENT_VERB:GET}
      http_server:
        address: ${INPUT_HTTP_SERVER_ADDRESS}
        cert_file: ${INPUT_HTTP_SERVER_CERT_FILE}
        key_file: ${INPUT_HTTP_SERVER_KEY_FILE}
        path: ${INPUT_HTTP_SERVER_PATH:/post}
        timeout_ms: ${INPUT_HTTP_SERVER_TIMEOUT_MS:5000}
        ws_path: ${INPUT_HTTP_SERVER_WS_PATH:/post/ws}
      inproc: ${INPUT_INPROC}
      kafka:
        addresses:
        - ${INPUT_KAFKA_ADDRESSES:localhost:9092}
        client_id: ${INPUT_KAFKA_CLIENT_ID:benthos_kafka_input}
        consumer_group: ${INPUT_KAFKA_CONSUMER_GROUP:benthos_consumer_group}
        partition: ${INPUT_KAFKA_PARTITION:0}
        skip_cert_verify: ${INPUT_KAFKA_SKIP_CERT_VERIFY:false}
        start_from_oldest: ${INPUT_KAFKA_START_FROM_OLDEST:true}
        target_version: ${INPUT_KAFKA_TARGET_VERSION:1.0.0}
        tls_enable: ${INPUT_KAFKA_TLS_ENABLE:false}
        topic: ${INPUT_KAFKA_TOPIC:benthos_stream}
      kafka_balanced:
        addresses:
        - ${INPUT_KAFKA_BALANCED_ADDRESSES:localhost:9092}
        client_id: ${INPUT_KAFKA_BALANCED_CLIENT_ID:benthos_kafka_input}
        consumer_group: ${INPUT_KAFKA_BALANCED_CONSUMER_GROUP:benthos_consumer_group}
        skip_cert_verify: ${INPUT_KAFKA_BALANCED_SKIP_CERT_VERIFY:false}
        start_from_oldest: ${INPUT_KAFKA_BALANCED_START_FROM_OLDEST:true}
        tls_enable: ${INPUT_KAFKA_BALANCED_TLS_ENABLE:false}
        topics:
        - ${INPUT_KAFKA_BALANCED_TOPICS:benthos_stream}
      mqtt:
        client_id: ${INPUT_MQTT_CLIENT_ID:benthos_input}
        qos: ${INPUT_MQTT_QOS:1}
        topics:
        - ${INPUT_MQTT_TOPICS:benthos_topic}
        urls:
        - ${INPUT_MQTT_URLS:tcp://localhost:1883}
      nats:
        subject: ${INPUT_NATS_SUBJECT:benthos_messages}
        urls:
        - ${INPUT_NATS_URLS:nats://localhost:4222}
      nats_stream:
        client_id: ${INPUT_NATS_STREAM_CLIENT_ID:benthos_client}
        cluster_id: ${INPUT_NATS_STREAM_CLUSTER_ID:test-cluster}
        durable_name: ${INPUT_NATS_STREAM_DURABLE_NAME:benthos_offset}
        queue: ${INPUT_NATS_STREAM_QUEUE:benthos_queue}
        start_from_oldest: ${INPUT_NATS_STREAM_START_FROM_OLDEST:true}
        subject: ${INPUT_NATS_STREAM_SUBJECT:benthos_messages}
        urls:
        - ${INPUT_NATS_STREAM_URLS:nats://localhost:4222}
      nsq:
        channel: ${INPUT_NSQ_CHANNEL:benthos_stream}
        lookupd_http_addresses:
        - ${INPUT_NSQ_LOOKUPD_HTTP_ADDRESSES:localhost:4161}
        max_in_flight: ${INPUT_NSQ_MAX_IN_FLIGHT:100}
        nsqd_tcp_addresses:
        - ${INPUT_NSQ_NSQD_TCP_ADDRESSES:localhost:4150}
        topic: ${INPUT_NSQ_TOPIC:benthos_messages}
        user_agent: ${INPUT_NSQ_USER_AGENT:benthos_consumer}
      redis_list:
        key: ${INPUT_REDIS_LIST_KEY:benthos_list}
        timeout_ms: ${INPUT_REDIS_LIST_TIMEOUT_MS:5000}
        url: ${INPUT_REDIS_LIST_URL:tcp://localhost:6379}
      redis_pubsub:
        channels:
        - ${INPUT_REDIS_PUBSUB_CHANNELS:benthos_chan}
        url: ${INPUT_REDIS_PUBSUB_URL:tcp://localhost:6379}
      scalability_protocols:
        bind: ${INPUT_SCALABILITY_PROTOCOLS_BIND:true}
        poll_timeout_ms: ${INPUT_SCALABILITY_PROTOCOLS_POLL_TIMEOUT_MS:5000}
        reply_timeout_ms: ${INPUT_SCALABILITY_PROTOCOLS_REPLY_TIMEOUT_MS:5000}
        socket_type: ${INPUT_SCALABILITY_PROTOCOLS_SOCKET_TYPE:PULL}
        urls:
        - ${INPUT_SCALABILITY_PROTOCOLS_URLS:tcp://*:5555}
      stdin:
        delimiter: ${INPUT_STDIN_DELIMITER}
        max_buffer: ${INPUT_STDIN_MAX_BUFFER:1000000}
        multipart: ${INPUT_STDIN_MULTIPART:false}
      type: ${INPUT_TYPE:dynamic}
      websocket:
        basic_auth:
          enabled: ${INPUT_WEBSOCKET_BASIC_AUTH_ENABLED:false}
          password: ${INPUT_WEBSOCKET_BASIC_AUTH_PASSWORD}
          username: ${INPUT_WEBSOCKET_BASIC_AUTH_USERNAME}
        oauth:
          access_token: ${INPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${INPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${INPUT_WEBSOCKET_OAUTH_CONSUMER_KEY}
          consumer_secret: ${INPUT_WEBSOCKET_OAUTH_CONSUMER_SECRET}
          enabled: ${INPUT_WEBSOCKET_OAUTH_ENABLED:false}
          request_url: ${INPUT_WEBSOCKET_OAUTH_REQUEST_URL}
        open_message: ${INPUT_WEBSOCKET_OPEN_MESSAGE}
        url: ${INPUT_WEBSOCKET_URL:ws://localhost:4195/get/ws}
  type: broker
buffer:
  memory:
    limit: ${BUFFER_MEMORY_LIMIT:524288000}
  mmap_file:
    clean_up: ${BUFFER_MMAP_FILE_CLEAN_UP:true}
    directory: ${BUFFER_MMAP_FILE_DIRECTORY}
    file_size: ${BUFFER_MMAP_FILE_FILE_SIZE:262144000}
    reserved_disk_space: ${BUFFER_MMAP_FILE_RESERVED_DISK_SPACE:104857600}
    retry_period_ms: ${BUFFER_MMAP_FILE_RETRY_PERIOD_MS:1000}
  type: ${BUFFER_TYPE:none}
pipeline:
  processors:
  - archive:
      format: ${PROCESSOR_ARCHIVE_FORMAT:binary}
      path: ${PROCESSOR_ARCHIVE_PATH:${!count:files}-${!timestamp_unix_nano}.txt}
    batch:
      byte_size: ${PROCESSOR_BATCH_BYTE_SIZE:10000}
      condition:
        count:
          arg: ${PROCESSOR_BATCH_CONDITION_COUNT_ARG:100}
        jmespath:
          part: ${PROCESSOR_BATCH_CONDITION_JMESPATH_PART:0}
          query: ${PROCESSOR_BATCH_CONDITION_JMESPATH_QUERY}
        resource: ${PROCESSOR_BATCH_CONDITION_RESOURCE}
        static: ${PROCESSOR_BATCH_CONDITION_STATIC:false}
        text:
          arg: ${PROCESSOR_BATCH_CONDITION_TEXT_ARG}
          operator: ${PROCESSOR_BATCH_CONDITION_TEXT_OPERATOR:equals_cs}
          part: ${PROCESSOR_BATCH_CONDITION_TEXT_PART:0}
        type: ${PROCESSOR_BATCH_CONDITION_TYPE:static}
      period_ms: ${PROCESSOR_BATCH_PERIOD_MS:0}
    bounds_check:
      max_part_size: ${PROCESSOR_BOUNDS_CHECK_MAX_PART_SIZE:1073741824}
      max_parts: ${PROCESSOR_BOUNDS_CHECK_MAX_PARTS:100}
      min_part_size: ${PROCESSOR_BOUNDS_CHECK_MIN_PART_SIZE:1}
      min_parts: ${PROCESSOR_BOUNDS_CHECK_MIN_PARTS:1}
    combine:
      parts: ${PROCESSOR_COMBINE_PARTS:2}
    compress:
      algorithm: ${PROCESSOR_COMPRESS_ALGORITHM:gzip}
      level: ${PROCESSOR_COMPRESS_LEVEL:-1}
    decode:
      scheme: ${PROCESSOR_DECODE_SCHEME:base64}
    decompress:
      algorithm: ${PROCESSOR_DECOMPRESS_ALGORITHM:gzip}
    encode:
      scheme: ${PROCESSOR_ENCODE_SCHEME:base64}
    grok:
      named_captures_only: ${PROCESSOR_GROK_NAMED_CAPTURES_ONLY:true}
      output_format: ${PROCESSOR_GROK_OUTPUT_FORMAT:json}
      remove_empty_values: ${PROCESSOR_GROK_REMOVE_EMPTY_VALUES:true}
      use_default_patterns: ${PROCESSOR_GROK_USE_DEFAULT_PATTERNS:true}
    hash_sample:
      parts:
      - ${PROCESSOR_HASH_SAMPLE_PARTS:0}
      retain_max: ${PROCESSOR_HASH_SAMPLE_RETAIN_MAX:10}
      retain_min: ${PROCESSOR_HASH_SAMPLE_RETAIN_MIN:0}
    http:
      request:
        backoff_on:
        - ${PROCESSOR_HTTP_REQUEST_BACKOFF_ON:429}
        basic_auth:
          enabled: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_ENABLED:false}
          password: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_PASSWORD}
          username: ${PROCESSOR_HTTP_REQUEST_BASIC_AUTH_USERNAME}
        headers:
          Content-Type: ${PROCESSOR_HTTP_REQUEST_HEADERS_CONTENT_TYPE:application/octet-stream}
        max_retry_backoff_ms: ${PROCESSOR_HTTP_REQUEST_MAX_RETRY_BACKOFF_MS:300000}
        oauth:
          access_token: ${PROCESSOR_HTTP_REQUEST_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${PROCESSOR_HTTP_REQUEST_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${PROCESSOR_HTTP_REQUEST_OAUTH_CONSUMER_KEY}
          consumer_secret: ${PROCESSOR_HTTP_REQUEST_OAUTH_CONSUMER_SECRET}
          enabled: ${PROCESSOR_HTTP_REQUEST_OAUTH_ENABLED:false}
          request_url: ${PROCESSOR_HTTP_REQUEST_OAUTH_REQUEST_URL}
        retries: ${PROCESSOR_HTTP_REQUEST_RETRIES:3}
        retry_period_ms: ${PROCESSOR_HTTP_REQUEST_RETRY_PERIOD_MS:1000}
        skip_cert_verify: ${PROCESSOR_HTTP_REQUEST_SKIP_CERT_VERIFY:false}
        timeout_ms: ${PROCESSOR_HTTP_REQUEST_TIMEOUT_MS:5000}
        url: ${PROCESSOR_HTTP_REQUEST_URL:http://localhost:4195/post}
        verb: ${PROCESSOR_HTTP_REQUEST_VERB:POST}
    insert_part:
      content: ${PROCESSOR_INSERT_PART_CONTENT}
      index: ${PROCESSOR_INSERT_PART_INDEX:-1}
    jmespath:
      query: ${PROCESSOR_JMESPATH_QUERY}
    json:
      operator: ${PROCESSOR_JSON_OPERATOR:get}
      path: ${PROCESSOR_JSON_PATH}
      value: ${PROCESSOR_JSON_VALUE}
    merge_json:
      retain_parts: ${PROCESSOR_MERGE_JSON_RETAIN_PARTS:false}
    sample:
      retain: ${PROCESSOR_SAMPLE_RETAIN:10}
      seed: ${PROCESSOR_SAMPLE_SEED:0}
    select_parts:
      parts:
      - ${PROCESSOR_SELECT_PARTS_PARTS:0}
    text:
      arg: ${PROCESSOR_TEXT_ARG}
      operator: ${PROCESSOR_TEXT_OPERATOR:trim_space}
      value: ${PROCESSOR_TEXT_VALUE}
    type: ${PROCESSOR_TYPE:noop}
    unarchive:
      format: ${PROCESSOR_UNARCHIVE_FORMAT:binary}
  threads: ${PROCESSOR_THREADS:1}
output:
  broker:
    copies: ${OUTPUTS:1}
    outputs:
    - amazon_s3:
        bucket: ${OUTPUT_AMAZON_S3_BUCKET}
        credentials:
          id: ${OUTPUT_AMAZON_S3_CREDENTIALS_ID}
          role: ${OUTPUT_AMAZON_S3_CREDENTIALS_ROLE}
          secret: ${OUTPUT_AMAZON_S3_CREDENTIALS_SECRET}
          token: ${OUTPUT_AMAZON_S3_CREDENTIALS_TOKEN}
        path: ${OUTPUT_AMAZON_S3_PATH:${!count:files}-${!timestamp_unix_nano}.txt}
        region: ${OUTPUT_AMAZON_S3_REGION:eu-west-1}
        timeout_s: ${OUTPUT_AMAZON_S3_TIMEOUT_S:5}
      amazon_sqs:
        credentials:
          id: ${OUTPUT_AMAZON_SQS_CREDENTIALS_ID}
          role: ${OUTPUT_AMAZON_SQS_CREDENTIALS_ROLE}
          secret: ${OUTPUT_AMAZON_SQS_CREDENTIALS_SECRET}
          token: ${OUTPUT_AMAZON_SQS_CREDENTIALS_TOKEN}
        region: ${OUTPUT_AMAZON_SQS_REGION:eu-west-1}
        url: ${OUTPUT_AMAZON_SQS_URL}
      amqp:
        exchange: ${OUTPUT_AMQP_EXCHANGE:benthos-exchange}
        exchange_type: ${OUTPUT_AMQP_EXCHANGE_TYPE:direct}
        immediate: ${OUTPUT_AMQP_IMMEDIATE:false}
        key: ${OUTPUT_AMQP_KEY:benthos-key}
        mandatory: ${OUTPUT_AMQP_MANDATORY:false}
        persistent: ${OUTPUT_AMQP_PERSISTENT:false}
        url: ${OUTPUT_AMQP_URL:amqp://guest:guest@localhost:5672/}
      dynamic:
        prefix: ${OUTPUT_DYNAMIC_PREFIX}
        timeout_ms: ${OUTPUT_DYNAMIC_TIMEOUT_MS:5000}
      elasticsearch:
        basic_auth:
          enabled: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_ENABLED:false}
          password: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_PASSWORD}
          username: ${OUTPUT_ELASTICSEARCH_BASIC_AUTH_USERNAME}
        id: ${OUTPUT_ELASTICSEARCH_ID:${!count:elastic_ids}-${!timestamp_unix}}
        index: ${OUTPUT_ELASTICSEARCH_INDEX:benthos_index}
        timeout_ms: ${OUTPUT_ELASTICSEARCH_TIMEOUT_MS:5000}
        urls:
        - ${OUTPUT_ELASTICSEARCH_URLS:http://localhost:9200}
      file:
        delimiter: ${OUTPUT_FILE_DELIMITER}
        path: ${OUTPUT_FILE_PATH}
      files:
        path: ${OUTPUT_FILES_PATH:${!count:files}-${!timestamp_unix_nano}.txt}
      http_client:
        backoff_on:
        - ${OUTPUT_HTTP_CLIENT_BACKOFF_ON:429}
        basic_auth:
          enabled: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_ENABLED:false}
          password: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_PASSWORD}
          username: ${OUTPUT_HTTP_CLIENT_BASIC_AUTH_USERNAME}
        headers:
          Content-Type: ${OUTPUT_HTTP_CLIENT_HEADERS_CONTENT_TYPE:application/octet-stream}
        max_retry_backoff_ms: ${OUTPUT_HTTP_CLIENT_MAX_RETRY_BACKOFF_MS:300000}
        oauth:
          access_token: ${OUTPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${OUTPUT_HTTP_CLIENT_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${OUTPUT_HTTP_CLIENT_OAUTH_CONSUMER_KEY}
          consumer_secret: ${OUTPUT_HTTP_CLIENT_OAUTH_CONSUMER_SECRET}
          enabled: ${OUTPUT_HTTP_CLIENT_OAUTH_ENABLED:false}
          request_url: ${OUTPUT_HTTP_CLIENT_OAUTH_REQUEST_URL}
        retries: ${OUTPUT_HTTP_CLIENT_RETRIES:3}
        retry_period_ms: ${OUTPUT_HTTP_CLIENT_RETRY_PERIOD_MS:1000}
        skip_cert_verify: ${OUTPUT_HTTP_CLIENT_SKIP_CERT_VERIFY:false}
        timeout_ms: ${OUTPUT_HTTP_CLIENT_TIMEOUT_MS:5000}
        url: ${OUTPUT_HTTP_CLIENT_URL:http://localhost:4195/post}
        verb: ${OUTPUT_HTTP_CLIENT_VERB:POST}
      http_server:
        address: ${OUTPUT_HTTP_SERVER_ADDRESS}
        cert_file: ${OUTPUT_HTTP_SERVER_CERT_FILE}
        key_file: ${OUTPUT_HTTP_SERVER_KEY_FILE}
        path: ${OUTPUT_HTTP_SERVER_PATH:/get}
        stream_path: ${OUTPUT_HTTP_SERVER_STREAM_PATH:/get/stream}
        timeout_ms: ${OUTPUT_HTTP_SERVER_TIMEOUT_MS:5000}
        ws_path: ${OUTPUT_HTTP_SERVER_WS_PATH:/get/ws}
      inproc: ${OUTPUT_INPROC}
      kafka:
        ack_replicas: ${OUTPUT_KAFKA_ACK_REPLICAS:false}
        addresses:
        - ${OUTPUT_KAFKA_ADDRESSES:localhost:9092}
        client_id: ${OUTPUT_KAFKA_CLIENT_ID:benthos_kafka_output}
        compression: ${OUTPUT_KAFKA_COMPRESSION:none}
        key: ${OUTPUT_KAFKA_KEY}
        max_msg_bytes: ${OUTPUT_KAFKA_MAX_MSG_BYTES:1000000}
        round_robin_partitions: ${OUTPUT_KAFKA_ROUND_ROBIN_PARTITIONS:false}
        skip_cert_verify: ${OUTPUT_KAFKA_SKIP_CERT_VERIFY:false}
        target_version: ${OUTPUT_KAFKA_TARGET_VERSION:1.0.0}
        timeout_ms: ${OUTPUT_KAFKA_TIMEOUT_MS:5000}
        tls_enable: ${OUTPUT_KAFKA_TLS_ENABLE:false}
        topic: ${OUTPUT_KAFKA_TOPIC:benthos_stream}
      mqtt:
        client_id: ${OUTPUT_MQTT_CLIENT_ID:benthos_output}
        qos: ${OUTPUT_MQTT_QOS:1}
        topic: ${OUTPUT_MQTT_TOPIC:benthos_topic}
        urls:
        - ${OUTPUT_MQTT_URLS:tcp://localhost:1883}
      nats:
        subject: ${OUTPUT_NATS_SUBJECT:benthos_messages}
        urls:
        - ${OUTPUT_NATS_URLS:nats://localhost:4222}
      nats_stream:
        client_id: ${OUTPUT_NATS_STREAM_CLIENT_ID:benthos_client}
        cluster_id: ${OUTPUT_NATS_STREAM_CLUSTER_ID:test-cluster}
        subject: ${OUTPUT_NATS_STREAM_SUBJECT:benthos_messages}
        urls:
        - ${OUTPUT_NATS_STREAM_URLS:nats://localhost:4222}
      nsq:
        max_in_flight: ${OUTPUT_NSQ_MAX_IN_FLIGHT:100}
        nsqd_tcp_address: ${OUTPUT_NSQ_NSQD_TCP_ADDRESS:localhost:4150}
        topic: ${OUTPUT_NSQ_TOPIC:benthos_messages}
        user_agent: ${OUTPUT_NSQ_USER_AGENT:benthos_producer}
      redis_list:
        key: ${OUTPUT_REDIS_LIST_KEY:benthos_list}
        url: ${OUTPUT_REDIS_LIST_URL:tcp://localhost:6379}
      redis_pubsub:
        channel: ${OUTPUT_REDIS_PUBSUB_CHANNEL:benthos_chan}
        url: ${OUTPUT_REDIS_PUBSUB_URL:tcp://localhost:6379}
      scalability_protocols:
        bind: ${OUTPUT_SCALABILITY_PROTOCOLS_BIND:false}
        poll_timeout_ms: ${OUTPUT_SCALABILITY_PROTOCOLS_POLL_TIMEOUT_MS:5000}
        socket_type: ${OUTPUT_SCALABILITY_PROTOCOLS_SOCKET_TYPE:PUSH}
        urls:
        - ${OUTPUT_SCALABILITY_PROTOCOLS_URLS:tcp://localhost:5556}
      stdout:
        delimiter: ${OUTPUT_STDOUT_DELIMITER}
      type: ${OUTPUT_TYPE:dynamic}
      websocket:
        basic_auth:
          enabled: ${OUTPUT_WEBSOCKET_BASIC_AUTH_ENABLED:false}
          password: ${OUTPUT_WEBSOCKET_BASIC_AUTH_PASSWORD}
          username: ${OUTPUT_WEBSOCKET_BASIC_AUTH_USERNAME}
        oauth:
          access_token: ${OUTPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN}
          access_token_secret: ${OUTPUT_WEBSOCKET_OAUTH_ACCESS_TOKEN_SECRET}
          consumer_key: ${OUTPUT_WEBSOCKET_OAUTH_CONSUMER_KEY}
          consumer_secret: ${OUTPUT_WEBSOCKET_OAUTH_CONSUMER_SECRET}
          enabled: ${OUTPUT_WEBSOCKET_OAUTH_ENABLED:false}
          request_url: ${OUTPUT_WEBSOCKET_OAUTH_REQUEST_URL}
        url: ${OUTPUT_WEBSOCKET_URL:ws://localhost:4195/post/ws}
    pattern: ${OUTPUTS_PATTERN:greedy}
  type: broker
logger:
  add_timestamp: ${LOGGER_ADD_TIMESTAMP:true}
  json_format: ${LOGGER_JSON_FORMAT:true}
  log_level: ${LOGGER_LOG_LEVEL:INFO}
  prefix: ${LOGGER_PREFIX:benthos}
metrics:
  prefix: ${METRICS_PREFIX:benthos}
  statsd:
    address: ${METRICS_STATSD_ADDRESS:localhost:4040}
    flush_period: ${METRICS_STATSD_FLUSH_PERIOD:100ms}
    max_packet_size: ${METRICS_STATSD_MAX_PACKET_SIZE:1440}
    network: ${METRICS_STATSD_NETWORK:udp}
  type: ${METRICS_TYPE:http_server}
