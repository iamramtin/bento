name: twitter_search
type: input
status: experimental
categories: [ Services ]
summary: Consumes tweets matching a given search using the Twitter recent search V2 API.
description: |
  Continuously polls the [Twitter recent search V2 API](https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent) for tweets that match a given search query.
  
  In order to paginate requests that are made the ID of the latest received tweet is stored in a [cache resource](/docs/components/caches/about), which is then used by subsequent requests to ensure only tweets after it are consumed. It is recommended that the cache you use is persistent so that Benthos can resume searches at the correct place on a restart.

  Authentication is done using OAuth 2.0 credentials which can be generated within the [Twitter developer portal](https://developer.twitter.com).

fields:
  - name: search
    description: A search expression to use.
    type: string

  - name: cache
    description: A cache resource to use for request pagination.
    type: string

  - name: rate_limit
    description: An optional rate limit resource to restrict API requests with.
    type: string
    default: ""

  - name: api_key
    description: An API key for OAuth 2.0 authentication. It is recommended that you populate this field using [environment variables](/docs/configuration/interpolation).
    type: string

  - name: api_secret
    description: An API secret for OAuth 2.0 authentication. It is recommended that you populate this field using [environment variables](/docs/configuration/interpolation).
    type: string

mapping: |
  root.generate.interval = "0 * * * * *"
  root.generate.mapping = "root = \"\""
  root.processors = [
    {
      "cache": {
        "resource": this.cache,
        "operator": "get",
        "key": "last_tweet_id",
      },
    },
    { "catch": [] }, # Don't care if the cache is empty
    {
      "bloblang": """let search = "%v"
  let url_base = "https://api.twitter.com/2/tweets/search/recent"
  let query_base = "?max_results=100&query=" + $search.escape_url_query()
  let tweet_params = if content().length() == 0 {
    "&start_time="+(timestamp_unix()-300).format_timestamp("2006-01-02T15:04:05Z","UTC").escape_url_query()
  } else {
    "&since_id="+content().string()
  }
  meta tweet_search_url = $url_base + $query_base + $tweet_params
  root = ""
  """.format(this.search)
    },
    {
      "http": {
        "url": """${! meta("tweet_search_url") }""",
        "verb": "GET",
        "rate_limit": this.rate_limit,
        "oauth2": {
          "enabled": true,
          "token_url": "https://api.twitter.com/oauth2/token",
          "client_key": this.api_key,
          "client_secret": this.api_secret,
        },
      },
    },
    {
      "bloblang": "root = if (this.data | []).length() > 0 { this.data } else { deleted() }",
    },
    {
      "unarchive": {
        "format": "json_array",
      },
    },
    {
      "cache": {
        "parts": [ -1 ],
        "resource": this.cache,
        "operator": "set",
        "key": "last_tweet_id",
        "value": """${! json("id") }""",
      },
    },
    { "split": {} },
  ]

tests:
  - name: Basic fields
    config:
      search: benthos.dev
      cache: foocache
      rate_limit: foolimit
      api_key: fookey
      api_secret: foosecret

    expected:
      generate:
        interval: '0 * * * * *'
        mapping: root = ""
      processors:
        - cache:
            resource: foocache
            operator: get
            key: last_tweet_id

        - catch: []

        - bloblang: |
            let search = "benthos.dev"
            let url_base = "https://api.twitter.com/2/tweets/search/recent"
            let query_base = "?max_results=100&query=" + $search.escape_url_query()
            let tweet_params = if content().length() == 0 {
              "&start_time="+(timestamp_unix()-300).format_timestamp("2006-01-02T15:04:05Z","UTC").escape_url_query()
            } else {
              "&since_id="+content().string()
            }
            meta tweet_search_url = $url_base + $query_base + $tweet_params
            root = ""

        - http:
            url: ${! meta("tweet_search_url") }
            verb: GET
            rate_limit: foolimit
            oauth2:
              enabled: true
              token_url: https://api.twitter.com/oauth2/token
              client_key: fookey
              client_secret: foosecret

        - bloblang: root = if (this.data | []).length() > 0 { this.data } else { deleted() }

        - unarchive:
            format: json_array

        - cache:
            # Only bother caching the latest tweet ID (last of the batch).
            parts: [ -1 ]
            resource: foocache
            operator: set
            key: last_tweet_id
            value: ${! json("id") }

        - split: {}
